My 5th year as Team Meh. Good contest this year! Game logic is always interesting.

This entry uses a simple a* pathfinder to try to get what it can. The map is fully emulated so the
robot at least knows when to give up. Signal handling was kind of a pain but meh. 

The basic logic is:

Try to navigate to a lambda, or
get to the lift if all lambdas are gone, or
see if any rocks are falling and wait for them to stop, or
try to move any moveable rocks, or
abort

This doesn't solve most of the puzzly maps since I don't have a way to prioritize moving rocks over
getting lambdas. I kind of ran out of steam after getting the emulator fully working. Oh, and my
robot doesn't shave.

All code was developed by me except for the Priority Queue (I used the C5 collections library)

Thanks to:

Niels Kokholm and Peter Sestoft for the excellent C5 collections library (http://www.itu.dk/research/c5/)
Jetbrains for ReSharper
Curtis and Britt for competing against me :)
SomaFM for the Dubstep channel
Wikipedia for the A* article
The Jenkins continuous integration server
Mercurial
Bitbucket

 - Tom Stivers
